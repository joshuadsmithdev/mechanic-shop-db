{
	"info": {
		"_postman_id": "ba1de2c4-f6a4-4705-8fd7-ca59849df6b5",
		"name": "Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45779572",
		"_collection_link": "https://joshuasmith-2599522.postman.co/workspace/Mechanic-Shop-knowledge-check~d60694e1-88a7-4929-a3f4-560353b7a874/collection/45779572-ba1de2c4-f6a4-4705-8fd7-ca59849df6b5?action=share&source=collection_link&creator=45779572"
	},
	"item": [
		{
			"name": "Customers",
			"item": [
				{
					"name": "Create Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let data;\r",
									"\r",
									"try {\r",
									"    data = pm.response.json();\r",
									"    pm.environment.set(\"customerId\", data.customer_id);\r",
									"    console.log(\"customerId set to: \" + data.customer_id);\r",
									"} catch (e) {\r",
									"    console.error(\"Failed to parse JSON response: \", e);\r",
									"}\r",
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response content type is text/html\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains the expected error message for 404 Not Found\", function () {\r",
									"    const responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include(\"Not Found\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is a valid HTML document\", function () {\r",
									"    const responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include('<!doctype html');\r",
									"    pm.expect(responseBody).to.include('<html');\r",
									"    pm.expect(responseBody).to.include('</html>');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Alice\",\r\n  \"last_name\": \"Smith\",\r\n  \"email\": \"alice@example.com\",\r\n  \"phone\": \"123-456-7890\",\r\n  \"address\": \"123 Main St\",\r\n  \"password\": \"secret123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/customers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response is valid JSON before parsing\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"    console.log(pm.response.json());\r",
									"} else {\r",
									"    console.log(\"Response is not valid JSON:\", pm.response.text());\r",
									"}\r",
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is 'text/html'\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains a title indicating '404 Not Found'\", function () {\r",
									"    const responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include('<title>404 Not Found</title>');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body includes a message indicating the requested URL was not found\", function () {\r",
									"    const responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include(\"Not Found\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/customers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Customer by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Log the response status code for testing\r",
									"console.log(`Response Status Code: ${pm.response.code}`);\r",
									"\r",
									"// Log the response time for testing\r",
									"console.log(`Response Time: ${pm.response.responseTime} ms`);\r",
									"\r",
									"// Log the entire response body for testing\r",
									"console.log('Response Body:', pm.response.json());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/customers/{{customerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								"{{customerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema matches the expected structure for a customer object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys('id', 'email', 'name', 'age', 'address');\r",
									"    \r",
									"    pm.expect(responseData.id).to.be.a('number');\r",
									"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
									"    pm.expect(responseData.age).to.be.a('number').and.to.be.at.least(0);\r",
									"    pm.expect(responseData.address).to.be.an('object').that.includes.all.keys('street', 'city', 'state', 'zip');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Customer ID in the response matches the requested ID\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.customerId).to.exist.and.to.equal(5);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains a success message or confirmation of the update\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('success').that.is.a('boolean');\r",
									"    pm.expect(responseData).to.have.property('message').that.is.a('string').and.to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Alice\",\r\n  \"last_name\": \"Smith\",\r\n  \"email\": \"alice@example.com\",\r\n  \"phone\": \"123-456-7890\",\r\n  \"address\": \"123 Main St\",\r\n  \"password\": \"secret123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/customers/{{customerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								"{{customerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains the required field: token\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('token').that.is.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Token should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.length.above(0, \"Token should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema for the login endpoint\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('token').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
									"const json = pm.response.json();\r",
									"pm.environment.set(\"customerToken\", json.token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{customerEmail}}\",\r\n  \"password\": \"{{customerPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Vehicles",
			"item": [
				{
					"name": "Add Vehicle to Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"    let data = pm.response.json();\r",
									"    pm.environment.set(\"vehicleVin\", data.vin);\r",
									"    console.log(\"vehicleVin set to: \" + data.vin);\r",
									"} else {\r",
									"    console.log(\"Response is not valid JSON.\");\r",
									"}\r",
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is text/html\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('text/html');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected error message\", function () {\r",
									"    const responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include(\"Not Found\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body includes the correct HTML structure\", function () {\r",
									"    const responseBody = pm.response.text();\r",
									"    \r",
									"    pm.expect(responseBody).to.include(\"<title>404 Not Found</title>\");\r",
									"    pm.expect(responseBody).to.include(\"<h1>Not Found</h1>\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response Content-Type is text/html\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"1HGCM82633A084352\",\r\n  \"customer_id\": {{customerId}},\r\n  \"make\": \"Honda\",\r\n  \"model\": \"Accord\",\r\n  \"year\": 2003,\r\n  \"license_plate\": \"ABC123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/vehicles/vehicles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"vehicles",
								"vehicles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Vehicles",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/vehicles/vehicles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"vehicles",
								"vehicles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Vehicle by VIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response content type is text/html\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('text/html');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains a meaningful error message\", function () {\r",
									"    const responseBody = pm.response.text();\r",
									"    \r",
									"    pm.expect(responseBody).to.include(\"Not Found\").and.to.include(\"The requested URL was not found on the server\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the correct structure for a 404 error\", function () {\r",
									"    const responseData = pm.response.text();\r",
									"\r",
									"    pm.expect(responseData).to.include('<title>404 Not Found</title>');\r",
									"    pm.expect(responseData).to.include('<h1>Not Found</h1>');\r",
									"    pm.expect(responseData).to.include('<p>The requested URL was not found on the server.</p>');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/vehicles/vehicles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"vehicles",
								"vehicles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Vehicle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed status code expectation\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains the correct Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains an appropriate error message\", function () {\r",
									"    const responseBody = pm.response.text();\r",
									"    \r",
									"    pm.expect(responseBody).to.include(\"Not Found\");\r",
									"    pm.expect(responseBody).to.include(\"The requested URL was not found on the server.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response schema for error messages\", function () {\r",
									"    const responseData = pm.response.text();\r",
									"    \r",
									"    pm.expect(responseData).to.be.a('string').and.to.include('404 Not Found');\r",
									"    pm.expect(responseData).to.include('<h1>Not Found</h1>');\r",
									"    pm.expect(responseData).to.include('<p>The requested URL was not found on the server.</p>');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"make\": \"Toyota\",\r\n  \"model\": \"Camry\",\r\n  \"year\": 2004,\r\n  \"license_plate\": \"XYZ789\",\r\n  \"customer_id\": {{customerId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/vehicles/vehicles/{{vehicleVin}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"vehicles",
								"vehicles",
								"{{vehicleVin}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Mechanics",
			"item": [
				{
					"name": "Create Mechanic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let data = pm.response.json();\r",
									"pm.environment.set(\"mechanicId\", data.mechanic_id);\r",
									"console.log(\"mechanic_id set to: \" + data.mechanic_id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Apple John\",\r\n  \"email\": \"mech@example.com\",\r\n  \"phone\": \"555-7890\",\r\n  \"address\": \"789 Repair Lane\",\r\n  \"salary\": 55000.00,\r\n  \"password\": \"{{mechanicPassword}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/mechanics",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mechanics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Mechanic",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Apple John\",\r\n  \"email\": \"mech@example.com\",\r\n  \"phone\": \"555-7890\",\r\n  \"address\": \"789 Repair Lane\",\r\n  \"salary\": 55000.00,\r\n  \"password\": \"{{mechanicPassword}}\",\r\n  \"mechanic_id\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/mechanics/{{mechanicId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mechanics",
								"{{mechanicId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Mechanics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/mechanics",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mechanics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Mechanic by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/mechanics/{{mechanicId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mechanics",
								"{{mechanicId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get mechanic tickets",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{mechanicToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "baseUrl",
								"value": "http://127.0.0.1:5000",
								"type": "text"
							},
							{
								"key": "customerEmail",
								"value": "alice@example.com",
								"type": "text"
							},
							{
								"key": "customerPassword",
								"value": "secret123",
								"type": "text"
							},
							{
								"key": "mechanicEmail",
								"value": "mech@example.com",
								"type": "text"
							},
							{
								"key": "mechanicPassword",
								"value": "secret123",
								"type": "text"
							},
							{
								"key": "customerToken",
								"value": "",
								"type": "text"
							},
							{
								"key": "mechanicToken",
								"value": "",
								"type": "text"
							},
							{
								"key": "authToken",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/mechanic/my-assigned-tickets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mechanic",
								"my-assigned-tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rankings",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/mechanics/ranked",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mechanics",
								"ranked"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
									"const json = pm.response.json();\r",
									"pm.environment.set(\"mechanicToken\", json.token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{mechanicEmail}}\",\r\n  \"password\": \"{{mechanicPassword}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/mechanics/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mechanics",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Service Tickets",
			"item": [
				{
					"name": "Create Ticket for Vehicle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let data;\r",
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is valid JSON\", function () {\r",
									"    try {\r",
									"        data = pm.response.json();\r",
									"        pm.environment.set(\"ticketId\", data.ticket_id);\r",
									"        console.log(\"ticketId set to: \" + data.ticket_id);\r",
									"    } catch (e) {\r",
									"        pm.expect.fail(\"Response is not valid JSON: \" + e.message);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"1HGCM82633A084352\",\r\n  \"description\": \"Brake pad replacement\",\r\n  \"status\": \"open\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/service_tickets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"service_tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Tickets",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "customerEmail",
								"value": "alice@example.com",
								"type": "text"
							},
							{
								"key": "customerPassword",
								"value": "secret123",
								"type": "text"
							},
							{
								"key": "mechanicEmail",
								"value": "mech@example.com",
								"type": "text"
							},
							{
								"key": "mechanicPassword",
								"value": "secret123",
								"type": "text"
							},
							{
								"key": "customerToken",
								"value": "",
								"type": "text"
							},
							{
								"key": "mechanicToken",
								"value": "",
								"type": "text"
							},
							{
								"key": "authToken",
								"value": "",
								"type": "text"
							},
							{
								"key": "baseUrl",
								"value": "http://127.0.0.1:5000",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/service_tickets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"service_tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Ticket by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/service_tickets/{{ticketId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"service_tickets",
								"{{ticketId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Ticket",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{mechanicToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"1HGCM82633A084352\",\r\n  \"description\": \"Brake and rotor replacement\",\r\n  \"status\": \"in_progress\",\r\n  \"date_out\": \"2025-06-25T17:00:00\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/service_tickets/{{ticketId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"service_tickets",
								"{{ticketId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "customer tickets",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0NCIsImV4cCI6MTc1NTIwMDEzM30.RLDFB62Wbc00Cg33din0xb8NkIr_hjD_KnFdXwet9wA",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/customer/my-tickets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customer",
								"my-tickets"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Service Assignments",
			"item": [
				{
					"name": "Assign Mechanic to Ticket",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{mechanicToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"hours_worked\": 3.5\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/service_tickets/{{ticketId}}/assign-mechanic/{{mechanicId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"service_tickets",
								"{{ticketId}}",
								"assign-mechanic",
								"{{mechanicId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Final Clean up",
			"item": [
				{
					"name": "Remove Mechanic from Ticket",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{mechanicToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/service_tickets/{{ticketId}}/assign-mechanic/{{mechanicId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"service_tickets",
								"{{ticketId}}",
								"assign-mechanic",
								"{{mechanicId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Ticket",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{mechanicToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/service_tickets/{{ticketId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"service_tickets",
								"{{ticketId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Mechanic",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{mechanicToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/mechanics/{{mechanicId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mechanics",
								"{{mechanicId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Vehicle",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/vehicles/vehicles/{{vehicleVin}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"vehicles",
								"vehicles",
								"{{vehicleVin}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Customer",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/customers/{{customerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								"{{customerId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Inventory",
			"item": [
				{
					"name": "Create a part",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Brake Pads\",\r\n    \"price\": 80.99\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/inventory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all parts",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Brake Pads\",\r\n    \"price\": 80.99\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/inventory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single part",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Brake Pads\",\r\n    \"price\": 80.99\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/inventory/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inventory",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update part",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Ceramic Brake Pads\",\r\n    \"price\": 90.99\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/inventory/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inventory",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer-Protected",
			"item": [],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.variables.set(\"authToken\", pm.environment.get(\"customerToken\"));\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Mechanic-Protected",
			"item": [],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.variables.set(\"authToken\", pm.environment.get(\"mechanicToken\"));\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}
